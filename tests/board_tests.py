from unittest import TestCase
from board import GameBoard


class BoardTests(TestCase):
    def setUp(self):
        self.board = GameBoard()

    def testWinDiagonal(self):
        self.board._board[0][8] = (1, 0)
        self.board._board[1][9] = (1, 0)
        self.board._board[2][10] = (1, 0)
        self.board._board[3][11] = (1, 0)
        self.assertTrue(self.board.is_winning_board())
        self.board = GameBoard()
        self.board._board[0][0] = (1, 0)
        self.board._board[1][1] = (1, 0)
        self.board._board[2][2] = (1, 0)
        self.board._board[3][3] = (1, 0)
        self.assertTrue(self.board.is_winning_board())
        self.board = GameBoard()
        self.board._board[4][8] = (0, 2)
        self.board._board[5][9] = (1, 2)
        self.board._board[6][10] = (0, 2)
        self.board._board[7][11] = (1, 2)
        self.assertTrue(self.board.is_winning_board())
        self.board = GameBoard()
        self.board._board[4][0] = (0, 2)
        self.board._board[5][1] = (1, 2)
        self.board._board[6][2] = (0, 2)
        self.board._board[7][3] = (1, 2)
        self.assertTrue(self.board.is_winning_board())

    def testWinDiagonalReverse(self):
        self.board._board[4][3] = (0, 2)
        self.board._board[5][2] = (1, 2)
        self.board._board[6][1] = (0, 2)
        self.board._board[7][0] = (1, 2)
        self.assertTrue(self.board.is_winning_board())
        self.board = GameBoard()
        self.board._board[0][11] = (0, 2)
        self.board._board[1][10] = (1, 2)
        self.board._board[2][9] = (0, 2)
        self.board._board[3][8] = (1, 2)
        self.assertTrue(self.board.is_winning_board())
        self.board = GameBoard()
        self.board._board[4][11] = (0, 2)
        self.board._board[5][10] = (1, 2)
        self.board._board[6][9] = (0, 2)
        self.board._board[7][8] = (1, 2)
        self.assertTrue(self.board.is_winning_board())
        self.board = GameBoard()
        self.board._board[0][3] = (1, 2)
        self.board._board[1][2] = (1, 2)
        self.board._board[2][1] = (1, 2)
        self.board._board[3][0] = (1, 2)
        self.assertTrue(self.board.is_winning_board())

    def testNoWinner(self):
        self.board._board[1][7] = (1, 2)
        self.board._board[1][8] = (1, 2)
        self.board._board[1][9] = (1, 2)
        self.board._board[1][11] = (1, 2)
        self.board._board[3][4] = (1, 2)
        self.board._board[4][3] = (1, 2)
        self.board._board[5][2] = (1, 2)
        self.board._board[5][1] = (1, 2)
        self.assertFalse(self.board.is_winning_board())

    def testVertical(self):
        self.board._board[0][0] = (2, 0)
        self.board._board[0][1] = (2, 0)
        self.board._board[0][2] = (2, 0)
        self.board._board[0][3] = (2, 0)
        self.assertTrue(self.board.is_winning_board())
        self.board = GameBoard()
        self.board._board[0][8] = (2, 0)
        self.board._board[0][9] = (2, 0)
        self.board._board[0][10] = (2, 0)
        self.board._board[0][11] = (2, 0)
        self.assertTrue(self.board.is_winning_board())
        self.board = GameBoard()
        self.board._board[7][0] = (2, 0)
        self.board._board[7][1] = (2, 0)
        self.board._board[7][2] = (2, 0)
        self.board._board[7][3] = (2, 0)
        self.assertTrue(self.board.is_winning_board())
        self.board = GameBoard()
        self.board._board[7][8] = (2, 0)
        self.board._board[7][9] = (2, 0)
        self.board._board[7][10] = (2, 0)
        self.board._board[7][11] = (2, 0)
        self.assertTrue(self.board.is_winning_board())

    def testHorizontal(self):
        self.board._board[0][0] = (2, 0)
        self.board._board[1][0] = (2, 0)
        self.board._board[2][0] = (2, 0)
        self.board._board[3][0] = (2, 0)
        self.assertTrue(self.board.is_winning_board())
        self.board = GameBoard()
        self.board._board[0][11] = (2, 0)
        self.board._board[1][11] = (2, 0)
        self.board._board[2][11] = (2, 0)
        self.board._board[3][11] = (2, 0)
        self.assertTrue(self.board.is_winning_board())
        self.board = GameBoard()
        self.board._board[4][0] = (2, 0)
        self.board._board[5][0] = (2, 0)
        self.board._board[6][0] = (2, 0)
        self.board._board[7][0] = (2, 0)
        self.assertTrue(self.board.is_winning_board())
        self.board = GameBoard()
        self.board._board[4][11] = (2, 0)
        self.board._board[5][11] = (2, 0)
        self.board._board[6][11] = (2, 0)
        self.board._board[7][11] = (2, 0)
        self.assertTrue(self.board.is_winning_board())
